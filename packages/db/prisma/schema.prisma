// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  phone             String              @unique
  password          String
  Balance           Balance[]
  OnRampTransection OnRampTransection[]
  sentTransfer      p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfer  p2pTransfer[]       @relation(name: "ToUserRelation")
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  fromUserId Int
  fromUser   User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  timestamp  DateTime
}

model OnRampTransection {
  id        Int          @id @default(autoincrement())
  userId    Int
  status    OnRampStatus
  token     String       @unique
  amount    Int
  provider  String
  startTime DateTime
  user      User         @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  GitHub
}

enum OnRampStatus {
  Success
  Failed
  Processing
}
